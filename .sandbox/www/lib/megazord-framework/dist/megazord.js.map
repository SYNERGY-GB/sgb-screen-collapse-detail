{"version":3,"sources":["megazord.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","angular","./dataLoader","./router","./screen","./screenDirective","./templateDirective",2,"provider","this","$get","$rootScope","$injector","$q","_","$translate","$ionicPopup","loadConnector","config","event","data","params","inputTransform","invoke","_data","newEvent","name","load","loadInternal","dataPromise","dataSource","get","type","transformFunction","outputTransform","dataSourceParams","$broadcast","source","getData","then","when","promiseResult","onError","error","errorHandler","perform","alert","title","instant","subTitle","value","reject","message","_globalRouter","goToState","_error","_event","console",3,"factory","lastEvents","routes","$state","$ionicHistory","_dataLoader","_routerState","fireEvent","fireEventInternal","currentState","current","currentStateName","currentStateRoutes","state","fireConnectorEvent","dataConnector","self","promise","resolveTransition","_result","stateName","disableBack","nextViewOptions","log","go","createContextual","dataConnectors","defaults","connector",4,"initialize","$scope","_screenParams","screenName",5,"directive","restrict","link","scope","el","attrs","last","split","screenType","addClass",6,"template","templateType","screenParams","bindTo","$watch","templateUrl","templateName","bindToModel","prefix","indexOf","slice","_templateUrl"],"mappings":"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","file":"megazord.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n * @ngdoc module\n * @name megazord\n *\n * @description\n * This is the module for the framework stuff.\n */\nangular.module('megazord', ['ngLodash', 'pascalprecht.translate']);\n\nrequire('./router');\nrequire('./screenDirective');\nrequire('./templateDirective');\nrequire('./screen');\nrequire('./dataLoader');\n\n},{\"./dataLoader\":2,\"./router\":3,\"./screen\":4,\"./screenDirective\":5,\"./templateDirective\":6}],2:[function(require,module,exports){\n'use strict';\n\nangular.module('megazord')\n    .provider('_dataLoader', function() {\n\n        this.$get = ['$rootScope', '$injector', '$q', 'lodash', '$translate', '$ionicPopup', function($rootScope, $injector, $q, _, $translate, $ionicPopup) {\n            return {\n                loadConnector: function(config, event) {\n                    if(event) {\n                        var data = event.params;\n                        if (config.inputTransform) {\n                            data = $injector.invoke(config.inputTransform, null, {_data: data});\n                        }\n                        var newEvent = {name: event.name, params: data};\n                        return this.load(config, newEvent);\n                    }\n                    else\n                        return this.load(config, event);\n                },\n                loadInternal: function(config, event) {\n                    var dataPromise;\n\n                    if (config) {\n                        var dataSource = $injector.get(config.type);\n                        var transformFunction = config.outputTransform;\n                        var dataSourceParams = config.params;\n                        $rootScope.$broadcast('_dataLoadStarted', {source: config});\n                        dataPromise = dataSource.getData(dataSourceParams, event)\n                            .then(function (data) {\n                                if (transformFunction) {\n                                    data = $injector.invoke(transformFunction, null, {data: data});\n                                }\n                                return data;\n                            })\n                            .finally(function () {\n                                $rootScope.$broadcast('_dataLoadFinished', {source: config});\n                            });\n                    }\n                    else {\n                        dataPromise = $q.when({}); //Empty data object if no dataSource is present\n                    }\n\n                    return dataPromise;\n                },\n                load: function (config, event) {\n                    var promiseResult = this.loadInternal(config, event);\n\n                    if(config.onError) {\n                        return promiseResult.catch(function(error) {\n                            //Check the dataSource's onError\n                            var errorHandler = config.onError;\n                            switch(errorHandler.perform) {\n                                case 'message':\n                                    $ionicPopup.alert({\n                                        title: $translate.instant('error'),\n                                        subTitle: $translate.instant(errorHandler.value)\n                                    });\n                                    return $q.reject({ message: errorHandler.value, error: error});\n                                case 'transition':\n                                    $injector.invoke(['_globalRouter', function(_globalRouter){\n                                        _globalRouter.goToState(errorHandler.value, event);\n                                    }]);\n                                    return $q.reject(error);\n                                case 'function':\n                                    return $q.when($injector.invoke(errorHandler.value, null, { _error: error, _event: event }));\n                                default:\n                                    var message = 'Unsupported perform for dataSource onError: ' + errorHandler.perform;\n                                    console.error(message);\n                                    return $q.reject(message);\n                            }\n                        });\n                    }\n                    else {\n                        return promiseResult;\n                    }\n                }\n            }\n        }];\n    });\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * @ngdoc type\n * @name _router.Event\n * @module megazord\n * @description An event that is handled by a router.\n *\n * @property {String} name - The name of the event.\n * @property {Object} params - The parameters that will be passed to the target DataSource and Screen.\n */\n\n/**\n * @ngdoc overview\n * @name routing\n */\nangular.module('megazord')\n\n    .factory('_routerState', function() {\n        return {\n            lastEvents: { }\n        }\n    })\n    /**\n     * @ngdoc provider\n     * @name _globalRouterProvider\n     * @module megazord\n     * @description\n     *\n     * Allows the configuration of the router service.\n     */\n    .provider('_globalRouter', function () {\n        var routes = null;\n\n        /**\n         * @ngdoc method\n         * @name _globalRouterProvider#routes\n         *\n         * @param value {Object} Routing object that will be used in the application.\n         */\n        this.routes = function (value) {\n            routes = value;\n        };\n\n        this.$get = ['$state', '$injector', '$ionicHistory', 'lodash', '_dataLoader', '_routerState', function ($state, $injector, $ionicHistory, _, _dataLoader, _routerState) {\n\n            /**\n             * @ngdoc service\n             * @name _globalRouter\n             * @module megazord\n             *\n             * @description\n             *\n             * Allows for triggering of event that cause a screen transition.\n             */\n            return {\n\n                /**\n                 * @ngdoc method\n                 * @name _globalRouter#fireEvent\n                 *\n                 * @description\n                 * Triggers a state transition. The application will lookup in the routing table\n                 * to find the state to transition to, given the event that triggered the transition.\n                 *\n                 * If there is no entry in the routing table for the current state and event, an error\n                 * will be logged and no state transition will occur.\n                 *\n                 * @param event {_globalRouter.Event} The event that will generate a transition.\n                 */\n                fireEvent: function (event) {\n                    return this.fireEventInternal(event);\n                },\n\n                fireEventInternal: function(event) {\n                    var currentState = $state.current;\n                    var currentStateName = currentState.name;\n\n                    var currentStateRoutes = routes[currentStateName];\n                    if (!currentStateRoutes) {\n                        console.error('No routes found for screen \"' + currentStateName + '\".');\n                        return;\n                    }\n                    var state = currentStateRoutes[event.name];\n\n                    if (!state) {\n                        console.error('No route found for event \"' + event.name + '\" in screen \"' + currentStateName + '\"');\n                        return;\n                    }\n\n                    return this.goToState(state, event);\n                },\n\n                fireConnectorEvent: function(event, dataConnector) {\n                    var self = this;\n                    var promise = _dataLoader.loadConnector(dataConnector, event);\n                    if(dataConnector.resolveTransition) {\n                        return $injector.invoke(dataConnector.resolveTransition, null, { _result: promise, _event: event })\n                            .then(function(newEvent) {\n                                self.fireEventInternal(newEvent);\n                            })\n                    }\n                    else {\n                        return promise.then(function() { self.fireEventInternal(event); });\n                    }\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name _globalRouter#goToState\n                 *\n                 * @description\n                 * Triggers a state transition, bypassing the application's routing table.\n                 *\n                 * @param stateName The name of the state to transition into.\n                 * @param event The event that will be passed to the state.\n                 */\n                goToState: function (stateName, event) {\n                    var state = $state.get(stateName);\n                    if (!state) {\n                        console.error('State not found: \"' + stateName + '\"');\n                        return;\n                    }\n                    var disableBack = state.disableBack;\n\n                    //Data source invocation was moved to _dataLoader.\n\n                    if (disableBack) {\n                        $ionicHistory.nextViewOptions({disableBack: true});\n                    }\n\n                    _routerState.lastEvents[stateName] = event;\n\n                    console.log('Transitioning...');\n\n                    return $state.go(stateName);\n                },\n\n                createContextual: function(dataConnectors) {\n                    return _.defaults({\n                        fireEvent: function(event) {\n                            if(dataConnectors) {\n                                var connector = dataConnectors[event.name];\n                                if(connector) {\n                                    return this.fireConnectorEvent(event, connector);\n                                }\n                            }\n                            return this.fireEventInternal(event);\n                        }\n                    }, this);\n                }\n            }\n        }];\n    });\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nangular.module('megazord')\n\n/**\n * @ngdoc provider\n * @name _screenProvider\n * @module megazord\n * @description Screen initialization and utility service.\n *\n *\n */\n.provider('_screen', function() {\n    /**\n     * @ngdoc service\n     * @name _screen\n     * @module megazord\n     * @description\n     * Utility functions for screens.\n     */\n    this.$get = ['lodash', function(_) {\n        return {\n\n            /**\n             * @ngdoc method\n             * @name _screen#initialize\n             * @param $scope {scope} The screen's scope.\n             * @param _screenParams The screen's parameters.\n             */\n            initialize: function($scope, _screenParams) {\n                $scope._screenParams = _screenParams;\n                _.defaults(_screenParams, { title: _screenParams.screenName });\n            }\n        };\n    }];\n});\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nangular.module('megazord')\n/**\n * @ngdoc directive\n * @name mzScreen\n * @module megazord\n * @restrict A\n * @element ion-view\n *\n * @description\n *\n * The `mzScreen` directive is used to mark an element as the root of a screen. It will usually be placed\n * as an attribute of an `ionView` directive.\n */\n    .directive('mzScreen', ['lodash', function(_){\n       return {\n           restrict: 'A',\n           link: function(scope, el, attrs) {\n               //Simply add the screen type and screen instance name as classes to the element.\n               var screenName = _.last(scope._screenParams.screenName.split('.'));\n               var screenType = scope._screenParams.screenType;\n               el.addClass(screenType);\n               el.addClass(screenName);\n           }\n       }\n    }]);\n\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\nangular.module('megazord')\n    /**\n     * @ngdoc directive\n     * @name mzTemplate\n     * @module megazord\n     * @restrict E\n     * @scope\n     * @param {String|function(Object)} templateType The name of the template to load. If a function is given, the function\n     * will be called with the object provided in the `bindTo` parameter (if any), and the result of the call will be\n     * used as the template name. If the value starts with an `@`, the template will be looked for in the screen's\n     * template directory; otherwise it will be looked for in the application's template directory.\n     * @param {Object} screenParams The screen's parameters. This must be the same object injected via `_screenParams`.\n     * @param {Object} bindTo Data object to bind the template to.\n     * @param {Object} params Any additional parameters you may wish to pass to the template.\n     *\n     * @description\n     *\n     * The `mzTemplate` directive can be used to dynamically switch a template for a portion of a screen. This enables\n     * a higher level of customization for the final user of the screen, while keeping the screen's internals isolated.\n     *\n     */\n    .directive('mzTemplate',[function() {\n        return {\n            restrict: 'E',\n            template: '<ng-include src=\"_templateUrl\"/>',\n            scope: {\n                templateType: '=',\n                screenParams: '=',\n                bindTo: '=', //Can be optional\n                params: '=' //Can be optional\n            },\n            link : function (scope) {\n\n                scope.$watch('templateType', function(templateUrl) {\n\n                    if (!templateUrl) return; \n\n                    var templateType = templateUrl;\n                    var bindToModel = scope.bindTo;\n                    var templateName;\n                    var screenType; \n\n                    if(!templateType) {\n                        console.error('Must specify templateType attribute in mzTemplate directive.');\n                        return;\n                    }\n                    if(!scope.screenParams) {\n                        console.error('Must specify screenParams attribute in mzTemplate directive.');\n                        return;\n                    }\n\n                    if(typeof templateType === 'function') {\n                        //It's ok not to check for truthy bindToModel since it's optional.\n                        templateName = templateType(bindToModel);\n                    }\n                    else {\n                        templateName = templateType;\n                    }\n\n                    var prefix;\n                    if (scope.screenParams.screenType.indexOf('@') == 0) {\n                        screenType  = scope.screenParams.screenType.slice(1, scope.screenParams.screenType.length);\n                        prefix = 'screens';\n                    } else {\n                        screenType = scope.screenParams.screenType;\n                        prefix = 'lib'\n                    }\n\n\n                    if(templateName.indexOf('@') == 0) {\n                        scope._templateUrl = prefix + '/' + screenType + '/templates/' + templateName.slice(1, templateName.length) + '.html';\n                    }\n                    else {\n                        scope._templateUrl = 'templates/' + templateName;\n                    }\n\n                })\n            }\n        };\n    }]);\n\n\n},{}]},{},[1]);\n"],"sourceRoot":"/source/"}