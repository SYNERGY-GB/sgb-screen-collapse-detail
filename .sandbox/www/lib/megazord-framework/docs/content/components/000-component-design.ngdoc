@ngdoc overview
@name Component Design

@description

# Component Design

The power behind __Megazord Framework__ lies in a reusable configuration based component architecture. Usually in software development the way you show information is cuopled to the data, we have worked the framework to really uncouple the components and work with separated pieces.

The benefits are fenomenal and game changing:

- The time to develop an App consist, most of the time, in assembling the pieces and configuring them. You can take one fifth of the time, to develop one App for one mobile platform, to assemble a multiplatform mobile App.
- You can rely on ready made general components to show information and handle interaction (Screen) and data fetching components (Data sources).
- You just specify, via configuration, how each Event (Generated by Screen interaction) is managed, so you do not have to code event managemnt and navigation, the framework provides that.
- You already can have multiple languages managed by the App, you just specify the translations for each string used in the App and provide a default language.
- The process to get and provide data to each Screen is provided by the framework, if you need, you can transform the data to be consumed by the Screen this way you link Screen and Data.

The neat thing is that the Screens (the view) are not coupled with the data so you can really reuse the components to show information and also fetch data using the same data sources. Most of these features are posible because of AngularJS, Angular Translate, Angular UI Router, Ionic and Cordova.

Sometimes you need an special feature in yor App and there is no component you can reuse. Either to get data from a different source or to show specific information. For those cases you should develop new Components, either Screen (Template, Controller, Data and Configuration) or a Data source (Some connector to data).

It is very important to develop components in a way that can be reused by other so the problem to show information and get data is addressed once and the community benefits from this in less time and effort to develop new Apps. Follow the [Component Philosophy](#/guide/040-components) guide so you contribute with new components that can become an of the shelve piece of software.

Let us explain better what we consider it is important to be made on every component:

## Reusable

Each component is made to be used in *different* Apps, so the info that is shown (in a Screen) are just pieces of information in a layout, not tied to any specific dataset. So the fields (the names) that are shown is not related to any specific piece of information. A "Title" can be used to many different pieces of information like a Name for a Person, a Product, an Event, etc. 
In an Screen you just reuse a layout and the component can provide many layouts for the same type of information.

## General

The Screen must be designed to handle many different types of data. So it is for "general purpose" in the sense that it adapts for different sets of data with a particular structure. For instance a list of items can be used for Products, Events in a conference, Contact list, Accounts, and so on. But to show an specific product you might need a different Screen and layout. So the Screen is general to support specific structure of data, so any set of data that has the same structure can be represented in the Screen. 

The Screen must not be tied to any specific flow. So the Screen does not know from where is it called or what should be the next step. This way can be used in different scenarios in a general way. The person who assembles the App defines how each Event is managed and the next step in the flow of the App, this is not coupled in the App.

## Configurable

The components can be used the way they are implemented and to use it you do not have to code o develop anything, just configure parameters, data sources, events and how should be managed. Maybe you must adapt the data to the structure required by the Screen, this could be the case sometimes. In general, most of the time you should consume data in the structure required by the screen so you just configure parameters to make it work.

## Defined behaviour

The components has a default behaviour so you have a working component to be adapted to your specific use case. The idea is to provide a functional component so it is easier to adapt by looking at it and not coding about it. 

## Stateless

The components can be used more than one time in the same App. So you must not store any state information. This could prevent the reusability of the component in the App and cause some problems and unexpected behaviour. The state should be managed by other means.

## Documented

Each component should be documented in detail, with samples and use cases. So it is very easy to understand how it works and how can be adapted and configured.
