@ngdoc overview
@name Tutorial 1 - Screen Component

@description

# Tutorial - list screen

For your first screen, we will create a list of contacts 

1. To create the contacts, we first need the data of the contacts we want to show, so open the file fixtures/data.js and paste the data in this [url](https://s3-us-west-2.amazonaws.com/megazord/techDay/data/expositores.json).

	Next we have to get the data in our controller, so open up your megazordScreenName.js in your *src* folder and add the next code

		$scope.data = $stateParams.data 

2. Now that we have the data in our controller scope, we have to modify the template to show the contacts, so open up your megazordScreenName.html 
and add the following code

	    <div class="card opaque" ng-repeat="contact in data">
	    	<div class="item item-thumbnail-left item-stable item-icon-right">
		        <img src="{{ contact.image }}">
		        <h2>{{ contact.title }}</h2>
		        <p>{{ contact.detail1 }}</p>
		        <p>{{ contact.desc }}</p>
		        <i class="icon ion-chevron-right"></i> 
	    	</div>
		</div>

	Now we have a list of contacts with almost no effort.  We used the ionic classes to nicely style our contacts list

3. Lets add a search box to filter items.  First, lets create the search box in our template, so add the following code.

		<div class="card item-input-inset">
            <label class="item-input-wrapper">
                <i class="icon ion-ios-search placeholder-icon"></i>
                <input type="search" placeholder="Search" ng-model="searchQuery.value" 
                       ng-change="filterItems(searchQuery.value)">
            </label>
            <button class="button button-clear " ng-click="cancelSearch()">
                <i class="icon ion-close-circled"></i>
            </button>
        </div>

4. Now, our app might be in a language other than english, so lets change the search box placeholder so it uses the angular translate service to handle multiple languages, change 

		<input type="search" placeholder="Search" ng-model="searchQuery.value" 
                       ng-change="filterItems(searchQuery.value)">
    for

    	<input type="search" placeholder="{{ 'list_search' | translate }}" ng-model="searchQuery.value" 
                       ng-change="filterItems(searchQuery.value)">

    in the *en_us.json* file located in the *i18n* folder add the *list_search* value

    	"list_search": "Search" 

5. Now lets add the logic to our controller. We will use the lodash javascript library to filter the items in the list. So open your controller and inject the lodash angular service

		.controller('megazordScreenName-controller', ['_router', '_screen', '_screenParams','$stateParams', '$scope', 'lodash', 
                				    function(_router, _screen, _screenParams, $stateParams, $scope, _)

6. Before we define the search function, lets create a variable in our scope that will be the model of the search box. In your controller add

		$scope.searchQuery =  {
            value: ''
        }

7. Lets define the function *filterItems* that is triggered every time we type or delete a character in the search box. In your controller add the following code

        $scope.filterItems = function(searchQuery){
            var search = searchQuery.toLowerCase();
            $scope.filteredData = _.filter($scope.data, function(contact){
                return (contact.title && contact.title.toLowerCase().indexOf(search) != -1) ||
                       (contact.detail1 && contact.detail1.toLowerCase().indexOf(search) != -1) ||
                       (contact.desc && contact.desc.toLowerCase().indexOf(search) != -1);
            });
        };

8. Now, our search box is still not working because we are always showing the initial data, so lets change the array variable that we are iterating over. In the template, change the following line 

		<div class="card opaque" ng-repeat="contact in data">

	To

		<div class="card opaque" ng-repeat="contact in filteredData">

9. Now we see no contacts, why? because we haven't initialized the filteredData variable in the controller. So add the next line of code in your controller

		$scope.filteredData = $scope.data;

10. Finally, lets add a function in case the user taps the cancel icon in the search bar.  In your controller add 

        $scope.cancelSearch = function(){
            $scope.searchQuery.value = "";
            $scope.filteredData = $scope.data;
        };

11. Now we have a working screen, however there are no parameters, meaning that nobody cant customize the screen to their liking.  So lets make the search box and the right arrow icon optional.  Open the file fixtures/config.js and add the following code

		config = {
		    "showSearch" : false,
		    "showIcon": true
		};

12. We can access these parameters through $scope._screenParams, however this can be a bit uncomfortable for some.  So in your controller add the following line of code

		$scope.config = $scope._screenParams; 

13. Now lets add some conditionals ng-if in our template to show the search box and the icon depending on the parameter configuration file.  In your template, change the following lines of code 

		<div class="card item-input-inset">
		// For
		<div class="card item-input-inset" ng-if="config.showSearch">

	and

		<i class="icon ion-chevron-right"></i>
		// for
		<i ng-show="config.showIcon" class="icon ion-chevron-right"></i>  

14. But what if we want another ionic icon instead of the default icon?  the showIcon variable in your config file can be a string with the ionic icon name, in your template change the following line 

		<i ng-show="config.showIcon" class="icon ion-chevron-right"></i> 

	for

		<i ng-show="config.showIcon" class="{{config.showIcon}}"></i>  

	and change the value for *showIcon* in the config file for *icon ion-chevron-right*

15. We are almost done, the last thing we need to take care of is when the user taps a contact in the list.  Usually we would navigate to another screen where we could see the contact information in detail, so lets add a function that will handle the tapping event. In the template, change the following line of code

		<div class="card opaque" ng-repeat="contact in filteredData">

	for

		<div class="card opaque" ng-repeat="contact in filteredData" ng-click="contactClickHandler(contact)">

	In the controller lets add the *contactClickHandler* function to handle the tapping event, so add the following code

	    $scope.contactClickHandler = function(contact){
            //Nothing to do but fire the event
            _router.fireEvent({
                 name: 'contactClick',
                 params: {
                   contact: contact
                 }
            })
        }

16. Now that we have defined the event *contactClick*, when the user is configuring the app, he or she can define the event to navigate through the application